// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.BoxView = (function(_super) {

    __extends(BoxView, _super);

    function BoxView() {
      this.render = __bind(this.render, this);

      this.attributes = __bind(this.attributes, this);

      this.initialize = __bind(this.initialize, this);
      return BoxView.__super__.constructor.apply(this, arguments);
    }

    BoxView.prototype.initialize = function() {
      var html;
      html = '';
      if (this.model.get('title')) {
        html += '<p></p><p><span><%= title %></span></p><p></p>';
      }
      if (this.model.get('description')) {
        html += '<p><span class=\"description\"><%= description %></span></p>';
      }
      return this.template = _.template(html);
    };

    BoxView.prototype.attributes = function() {
      var attr,
        _this = this;
      attr = this.model.get('attributes');
      if (!attr) {
        attr = {};
      }
      if (this.model.get('className')) {
        attr['class'] = this.model.get('className');
      } else {
        attr['class'] = 'nicetext wrapp floatleft workbox img-rounded';
      }
      _.each(this.model.get('data'), (function(v, k) {
        return attr['data-' + k] = v;
      }));
      attr['title'] = this.model.get('Description');
      if (this.model.get('longdescription')) {
        attr['data-content'] = this.model.get('longdescription');
      }
      attr['id'] = this.model.get('id');
      return attr;
    };

    BoxView.prototype.render = function() {
      console.log('Rendering box view');
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    };

    return BoxView;

  })(Backbone.View);

}).call(this);
