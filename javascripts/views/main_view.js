// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      this.render = __bind(this.render, this);

      this.rnd = __bind(this.rnd, this);

      this.onExperienceListFetched = __bind(this.onExperienceListFetched, this);

      this.initialize = __bind(this.initialize, this);
      return MainView.__super__.constructor.apply(this, arguments);
    }

    MainView.prototype.initialize = function(skrollr) {
      var introList,
        _this = this;
      console.log(skrollr);
      this.skrollrObject = skrollr;
      this.views = [];
      this.width = $(window).width();
      this.height = $(window).height();
      console.log(this.width + 'x' + this.height);
      introList = new BoxList();
      introList.reset([
        {
          id: 'introtext',
          className: 'nicetext bluebox introtext centered well',
          data: {
            "0": "opacity:1;transform:translate(0px, " + (this.height / 2 - 100) + "px);",
            "1000": "opacity:0;transform:translate(0px, -200px);"
          },
          title: "Henrik Sandstr√∂m",
          description: "CV 2013",
          longdescription: 'Scroll down!'
        }
      ]);
      this.views.push(new BoxListView({
        attributes: {
          'class': 'intro'
        },
        collection: introList
      }));
      this.experienceList = new BoxList();
      this.experienceList.setUrl('http://henriksandstromcv.appspot.com/experience');
      return this.experienceList.fetch({
        success: function() {
          return _this.onExperienceListFetched();
        },
        remove: false
      });
    };

    MainView.prototype.onExperienceListFetched = function() {
      var a, b, dataC, diffa, diffb, end, index, item, start, translate1, translate2, _i,
        _this = this;
      console.log('onExperienceListFetched');
      this.experienceList.add({
        id: 'experienceheader',
        className: 'nicetext bluebox well',
        data: {
          '900': "opacity:0;transform:translate(0px, " + (this.height / 2 - 100) + "px);",
          '1500': "opacity:1;transform:translate(0px, " + (this.height / 2 - 100) + "px);",
          '2000': "opacity:1;transform:translate(0px, 0px);"
        },
        title: 'Experience'
      }, {
        at: 0
      });
      translate1 = "opacity:0.2;transform:translate(0px, " + (this.height * 2) + "px);";
      translate2 = "opacity:1;transform:translate(0px, 0px);";
      start = 2300;
      diffa = 500;
      diffb = 1000;
      a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15].map(function() {
        return _this.rnd(start, diffa, 0);
      });
      b = a.map(function(v) {
        return _this.rnd(v, diffb, 0.2);
      });
      dataC = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14].map((function(i) {
        var coll;
        coll = {};
        coll[a[i]] = translate1;
        coll[b[i]] = translate2;
        return coll;
      }));
      end = this.experienceList.length - 1;
      for (index = _i = 1; 1 <= end ? _i <= end : _i >= end; index = 1 <= end ? ++_i : --_i) {
        item = this.experienceList.at(index);
        item.set('data', dataC[index]);
      }
      this.views.push(new BoxListView({
        attributes: {
          "class": 'experience'
        },
        collection: this.experienceList
      }));
      this.render();
      return this.skrollrObject.refresh();
    };

    MainView.prototype.rnd = function(a, b, x) {
      return parseInt(a, 10) + parseInt(b * (x + Math.random()), 10);
    };

    MainView.prototype.render = function() {
      var v, _i, _len, _ref;
      console.log('Rendering login view');
      this.$el.html('');
      _ref = this.views;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        this.$el.append(v.render().el);
      }
      return this;
    };

    return MainView;

  })(Backbone.View);

}).call(this);
